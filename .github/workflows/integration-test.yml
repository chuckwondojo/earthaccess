name: Integration Tests

on:
  pull_request:
  push:
    branches:
      - main
    paths:
      - earthaccess/**
      - tests/**
      - docs/**
      - binder/**

# When this workflow is queued, automatically cancel any previous running
# or pending jobs from the same branch
concurrency:
  group: integration-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/install-pkg
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get full python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT
      - name: Install poetry
        uses: abatilo/actions-poetry@v3
      - name: Configure poetry
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
          poetry self add setuptools
      - name: Set up cache
        uses: actions/cache@v4
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('poetry.lock') }}
      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv
      - name: Install Dependencies
        if: ${{ !env.ACT }}
        run: poetry install --quiet --extras kerchunk
      - name: Install Dependencies
        if: ${{ env.ACT }}
        # When using `act` to run the workflow locally, the `poetry install` command
        # may fail due to network issues when running multiple Docker containers.
        run: poetry install --quiet --extras kerchunk || poetry install --quiet --extras kerchunk || poetry install --quiet --extras kerchunk
      - name: Test
        env:
          EARTHDATA_USERNAME: ${{ secrets.EDL_USERNAME }}
          EARTHDATA_PASSWORD: ${{ secrets.EDL_PASSWORD }}
          EARTHACCESS_TEST_USERNAME: ${{ secrets.EDL_USERNAME }}
          EARTHACCESS_TEST_PASSWORD: ${{ secrets.EDL_PASSWORD }}
        run: ./scripts/integration-test.sh

      - name: Upload coverage
        # Don't upload coverage when using the `act` tool to run the workflow locally
        if: ${{ !env.ACT }}
        uses: codecov/codecov-action@v4
